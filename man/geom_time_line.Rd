% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-time-line.R
\name{geom_time_line}
\alias{geom_time_line}
\title{Line geometry with temporal semantics}
\usage{
geom_time_line(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "time_civil",
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used to override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{orientation}{The orientation of the layer. The default (\code{NA})
automatically determines the orientation from the aesthetic mapping. In the
rare event that this fails it can be given explicitly by setting \code{orientation}
to either \code{"x"} or \code{"y"}. See the \emph{Orientation} section for more detail.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display. To include legend keys for all levels, even
when no data exists, use \code{TRUE}.  If \code{NA}, all levels are shown in legend,
but unobserved levels are omitted.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather than
combining with them. This is most useful for helper functions that define both
data and aesthetics and shouldn't inherit behaviour from the default plot specification.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:geom_path]{ggplot2::geom_line()}}.}
}
\description{
\code{geom_time_line()} connects observations in order of the time variable, similar to
\code{\link[ggplot2:geom_path]{ggplot2::geom_line()}}, but with special handling for time zones, gaps and
duplicated values.

The geometry helps to visualise time with changing time offsets provided by the
\verb{[x/y]timeoffset} aesthetics. Changes in time offsets are drawn using dashed lines,
which are most commonly used for timezone changes and daylight savings time transitions.
Timezone offsets are automatically used when times from the \code{mixtime} package are used
in conjunction with \code{\link[=position_time_civil]{position_time_civil()}} positioning (the default).

This geometry also respects implicit missing values in regular time series, and will
not connect temporal observations separated by gaps.

The \link[ggplot2:aes_group_order]{ggplot2::group} aesthetic determines which cases are connected together.
}
\section{Practical usage}{


The \code{geom_time_line()} geometry extends \code{\link[ggplot2:geom_path]{ggplot2::geom_line()}} with time
semantics that ensure the line's slope accurately reflects rates of change in
the measurements over time.

Most notably, \code{geom_time_line()} works closely with \code{\link[=position_time_civil]{position_time_civil()}}
and \code{\link[=position_time_absolute]{position_time_absolute()}} to correctly display time in civil and
absolute time formats, respectively. Civil time positioning (the default)
shows time as experienced in a specific timezone (also known as 'local time',
it is the time on clocks in that timezone). Absolute time positioning shows
time as a continuous timeline without timezone adjustments.

When time series are visualised in civil time, timezone offset changes (e.g.
due to daylight saving time) cause 'jumps' in time which are indicated with
dashed lines. This preserves the integrity of the line's slope across these
transitions. Another benefit of visualising time series in civil time is to
compare time series across different timezones, as the time axis is better
aligned with human behaviour in their local timezone (e.g. working hours,
sleep patterns, etc). Plotting time series in \emph{absolute time} shows the exact
contemporaneous timing of events across multiple timezones, which is useful
when resources or patterns are shared across timezones (e.g. international
markets, server load balancing, etc).

This geometry also maintains semantically valid slopes when time values are
missing (either implicitly or explicitly), or duplicated. Implicit missing
values in regular time series are semantically equivalent to explicit missing
values, and \code{geom_time_line()} since the slope between unkown values is also
unknown, \code{geom_time_line()} will not draw lines connecting missing values of
either type. Since duplicated time values are not semantically valid in
regular time series, \code{geom_time_line()} will issue a warning (or an error if
systematic duplicates are detected). When drawing a line between duplicated
time points, the correct slopes are drawn by connecting all lines that lead
to and from the duplicated time points (rather than drawing sawtooth lines).

Further details about each specific capability are described in the following
sections.
}

\section{Changing time offsets}{


The \code{xtimeoffset} and \code{ytimeoffset} aesthetics allow for visualization of time
offset changes, such as timezone transitions or daylight saving time changes.
When successive time offsets differ, a dashed line segment is drawn to show
the offset transition. These aesthetics are automatically set when using
\code{position} = \code{\link[=position_time_civil]{position_time_civil()}} (the default), however the offsets can
also be set manually to show other types of time offsets. One example of when
it is useful to set the offsets manually is when showing measurements from a
sensor with a known time drift (e.g. a clock that runs fast or slow) that is
re-calibrated at known times.
}

\section{Missing time values}{


Explicit missing values are where an \code{NA} value is included in the data, but
for regular time series it is also possible to identify implicit missing time
values. Unlike \code{\link[ggplot2:geom_path]{ggplot2::geom_line()}}, \code{geom_time_line()} will also not connect
points separated by implicit missing values, creating gaps in the line (just
like when an explicit missing value is present in \code{\link[ggplot2:geom_path]{ggplot2::geom_line()}}).
}

\section{Duplicated time values}{


If there are duplicated time values within a group, \code{geom_time_line()} will
issue a warning. An error will be raised if these duplications are systematic
across the geometry, specifically if more than 50\% of time points contain the
same number of duplicates. Systematic duplicates typically indicate a need to
use grouping aesthetics (\link[ggplot2:aes_group_order]{ggplot2::group}, or \link[ggplot2:aes_colour_fill_alpha]{ggplot2::colour}) to
draw separate lines for each time series. Rather than plotting an erroneous
'sawtooth' line which misrepresents the rate of change, the geometry will
draw all lines that connect to and from each of the duplicated time values.
}

\examples{

library(ggplot2)


# Basic time line plot of a random walk (no timezone changes)
df_ts <- data.frame(
  time = as.POSIXct("2023-03-11", tz = "Australia/Melbourne") + 0:11 * 3600,
  value = cumsum(rnorm(12, 2))
)
ggplot(df_ts, aes(time, value)) +
  geom_time_line()

# Random walk with a backward timezone change (DST ends)
df_tz_back <- data.frame(
  time = as.POSIXct("2023-04-02", tz = "Australia/Melbourne") + 0:11 * 3600,
  value = cumsum(rnorm(12, 2))
)
ggplot(df_tz_back, aes(time, value)) +
  geom_time_line()
ggplot(df_tz_back, aes(time, value)) +
  geom_time_line(position = position_time_absolute())

# Random walk with a forward timezone change (DST starts)
df_tz_forward <- data.frame(
  time = as.POSIXct("2023-10-01", tz = "Australia/Melbourne") + 0:11 * 3600,
  value = cumsum(rnorm(12, 2))
)
ggplot(df_tz_forward, aes(time, value)) +
  geom_time_line()
ggplot(df_tz_forward, aes(time, value)) +
 geom_time_line(position = position_time_absolute())


}
\seealso{
\code{\link[=position_time_civil]{position_time_civil()}}/\code{\link[=position_time_absolute]{position_time_absolute()}} for civil and absolute time positioning.

\code{\link[ggplot2:geom_path]{ggplot2::geom_line()}}/\code{\link[ggplot2:geom_path]{ggplot2::geom_path()}} for standard line/path geoms in ggplot2.
}
\section{Aesthetics}{

\code{geom_time_line()} understands the following aesthetics. Required aesthetics are displayed in bold and defaults are displayed for optional aesthetics:
\tabular{rll}{
 • \tab \strong{\code{\link[ggplot2:aes_position]{x}}} \tab   \cr
 • \tab \strong{\code{\link[ggplot2:aes_position]{y}}} \tab   \cr
 • \tab \code{\link[ggplot2:aes_colour_fill_alpha]{alpha}} \tab → \code{NA} \cr
 • \tab \code{\link[ggplot2:aes_colour_fill_alpha]{colour}} \tab → via \code{theme()} \cr
 • \tab \code{\link[ggplot2:aes_group_order]{group}} \tab → inferred \cr
 • \tab \code{\link[ggplot2:aes_linetype_size_shape]{linetype}} \tab → via \code{theme()} \cr
 • \tab \code{\link[ggplot2:aes_linetype_size_shape]{linewidth}} \tab → via \code{theme()} \cr
 • \tab \code{xtimeoffset} \tab   \cr
 • \tab \code{ytimeoffset} \tab   \cr
}

Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.
}

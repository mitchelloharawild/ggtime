% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coord-calendar.R
\name{coord_calendar}
\alias{coord_calendar}
\title{Calendar coordinates}
\usage{
coord_calendar(
  rows = waiver(),
  time_rows = waiver(),
  cols = waiver(),
  time_cols = waiver(),
  time = "x",
  ljust = 0.5,
  xlim = NULL,
  ylim = NULL,
  expand = FALSE,
  default = FALSE,
  clip = "on",
  clip_rows = "on",
  coord = coord_cartesian()
)
}
\arguments{
\item{rows}{Layout the time scale into calendar rows, one of:
\itemize{
\item \code{NULL} or \code{waiver()} for no rows (the default)
\item A \code{mixtime} vector giving time points at which the \code{time} axis should layout into rows
\item A function that takes the limits as input and returns row layout points as output
}}

\item{time_rows}{A duration giving the distance between calendar rows like
"1 weeks", or "1 month". If both \code{rows} and \code{time_rows} are
specified, \code{time_rows} wins.}

\item{cols, time_cols}{Not yet supported.}

\item{time}{A string specifying which aesthetic contains the time variable that
should be looped over. Default is \code{"x"}.}

\item{ljust}{Loop justification, a number between 0 and 1
indicating where the lines between looped positions are drawn
(0 indicates left, 1 indicates right, 0.5 indicates center).}

\item{xlim, ylim}{Limits for the x and y axes. \code{NULL} means use the default limits.}

\item{expand}{Logical indicating whether to expand the coordinate limits.
Default is \code{FALSE}.}

\item{default}{Logical indicating whether this is the default coordinate system.
Default is \code{FALSE}.}

\item{clip}{Should drawing be clipped to the extent of the plot panel?
A setting of \code{"on"} (the default) means yes, and a setting of \code{"off"} means no.}

\item{clip_rows}{Should the drawing of each loop of the timescale be clipped to
the breaks defined by \code{time_rows} and \code{ljust}?
A setting of \code{"on"} (the default) means yes, and a setting of \code{"off"} means no.}

\item{coord}{The underlying coordinate system to use. Default is \code{coord_cartesian()}.}
}
\description{
The calendar coordinate system arranges time series data into a calendar-like
layout, making it easier to see fine-grained temporal patterns over a long
time span. It has similar semantics as the looped coordinate system
(\code{\link[=coord_loop]{coord_loop()}}), however instead of overlaying looped data the calendar
coordinate space arranges each loop into rows and columns like a calendar.
}
\details{
This coordinate system is particularly useful for visualizing long time spans
with events that occur over short intervals (such as holidays).

It works by:

\enumerate{
\item Dividing the time axis into segments based on the specified row (and column) periods
\item Translating each panel into the rows and columns of a calendar layout
}

The coordinate system requires R version 4.2.0 or higher due to its use of
usage of clipping paths.
}
\section{Practical usage}{


The calendar coordinate system arranges a cartesian coordinate system into a
dense calendar-like layout. Calendar layouts are particularly useful for
identifying specific dates or events that occur over short intervals in long
series. For example, the daily pedestrian counts at Melbourne's Birrarung
Marr park is nearby to several major sporting venues, and the calendar layout
makes obvious the spikes in pedestrian activity that occur during annual
sporting events (such as the Australian Open tennis tournament). Calendar
layouts are also useful to identify the effect of holidays, especially when
their dates change each year (such as Easter).

Similarly to \code{\link[=coord_loop]{coord_loop()}}, the calendar coordinate system draws geometries
that cross the boundaries of calendar rows or columns. The justification of
these geometries can be controlled with the \code{ljust} parameter, as described
in \code{\link[=coord_loop]{coord_loop()}}.

The calendar coordinate system works well in conjunction with facetting to
give more space between months and/or years of the calendar. When facetting,
using \code{scales = "free_x"} is recommended to make each facet only include
time periods appropriate for that panel.
}

\examples{
library(ggplot2)

# A weekly calendar arrangement of pedestrian counts in Melbourne
# Notice the periods of high activity days for the Birrarung Marr sensor
# during the Australian Open tennis tournament in late January.
tsibble::pedestrian |>
  dplyr::filter(Date < "2015-02-01") |>
  ggplot(aes(x = Date_Time, y = Count, color = Sensor)) +
  geom_line() +
  coord_calendar(time_rows = "1 week")

# Monthly facets can be used to create a complete calendar for 2015.
tsibble::pedestrian |>
  dplyr::filter(lubridate::year(Date) == 2015) |>
  ggplot(aes(x = Date_Time, y = Count, color = Sensor)) +
  geom_line() +
  coord_calendar(time_rows = "1 week") +
  facet_wrap(
    vars(lubridate::month(Date, label = TRUE))
    ncol = 3, scales = "free_x"
  )

}
